<h1>About</h1>
<p>網頁: <a class="Link--inTextBlock" href="https://kehueisin.github.io/cd2024/">https://kehueisin.github.io/cd2024/</a></p>
<p>網誌: <a href="https://kehueisin.github.io/cd2024/blog">https://kehueisin.github.io/cd2024/blog</a></p>
<p>簡報: <a href="https://kehueisin.github.io/cd2024/reveal">https://kehueisin.github.io/cd2024/reveal</a></p>
<p>倉儲: <a href="https://github.com/KEHUEISIN/cd2024">https://github.com/KEHUEISIN/cd2024</a></p>
<p><span style="background-color: #ffff00;">KEHUEISIN個人網站，歡迎瀏覽。<img alt="embarassed" src="/static/tinymce4/tinymce/plugins/emoticons/img/smiley-embarassed.gif"/></span></p>
<h1>2a-midag8分組內容</h1>
<p><span style="color: #ff0000;">名字:</span>41023108 柯惠心  <span style="color: #ff0000;">職位:</span>第八組組長 </p>
<p><span style="color: #ff0000;">工作內容:</span>負責派組員各作業任務、解決組員疑難雜症。</p>
<p>下面為w1-w9我所做事項相關內容:</p>
<ul>
<li><span style="background-color: #ffff00;">目前完成中任務有:</span></li>
</ul>
<ol>
<li>2a各週影片剪輯上字幕及摘要。</li>
<li>小組及分組網站自評。</li>
<li>各週網誌內容整合。</li>
</ol>
<ul>
<li><span style="background-color: #ffff00;">目前進行中的任務:</span></li>
</ul>
<ol>
<li>latex pdf檔整合。</li>
<li>個人影片錄製。</li>
</ol>
<p><img alt="" height="878" src="/images/螢幕擷取畫面 2024-04-25 212103.png" width="694"/></p>
<h1>Experience</h1>
<p>此頁為心得，及問題延伸或感興趣問題議題探討區</p>
<h2>Problem discussion</h2>
<p><span style="background-color: #ffff00;">問:</span><span>分組倉儲子目錄內容沒跟組員倉儲同步</span></p>
<p><span style="background-color: #ff0000;">chatgpt答:</span></p>
<p>解決方法：</p>
<p>手動同步：</p>
<p>如果分組倉儲的子目錄內容與組員倉儲不同步，可以手動進行同步。進入子目錄，使用 git pull 命令從組員倉儲拉取最新的更改：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">cd 組員A目錄 # 進入組員 A 的子目錄
git pull origin main # 從組員 A 的主分支拉取最新的更改
</pre>
<p>檢查分支：</p>
<p>確保您正在正確的分支上進行操作。如果組員的更改在另一個分支上，您可能需要切換到該分支才能獲取更新。</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git checkout 分支名稱 # 切換到組員的分支
git pull origin 分支名稱 # 拉取最新的更改
</pre>
<p>查看遠端倉儲信息：</p>
<p>使用 git remote -v 命令查看當前倉儲關聯的遠端倉庫信息，確保正確關聯組員的遠端倉儲：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git remote -v
</pre>
<p><span>如果顯示的遠端倉儲不正確，可以使用 git remote add 命令重新添加正確的遠端倉儲：</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git remote add origin_correct_url
</pre>
<p>清除快取：</p>
<p>有時候可能是快取導致的問題，可以嘗試清除 Git 的快取並再次拉取：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git rm -r --cached .
git reset --hard HEAD
git pull origin main
</pre>
<p>更新本地分支：</p>
<p>如果是因為本地分支落後於遠端分支導致的同步問題，可以先更新本地分支：</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git fetch origin main
git merge origin/main
</pre>
<p>檢查權限：</p>
<p>確保您有足夠的權限訪問組員的遠端倉儲。如果是私有倉儲，可能需要授權或添加 SSH 鑰匙。</p>
<p>進行排查的步驟：</p>
<ol>
<li><strong>查看遠端倉儲信息</strong>：
<ul>
<li>使用 <code>git remote -v</code> 命令查看當前關聯的遠端倉庫信息，確保正確連接了組員的遠端倉儲。</li>
</ul>
</li>
<li>
<p><strong>查看本地分支情況</strong>：</p>
<ul>
<li>使用 <code>git branch</code> 命令查看本地分支，確保您正在正確的分支上進行操作。</li>
</ul>
</li>
<li>
<p><strong>查看本地倉儲狀態</strong>：</p>
<ul>
<li>使用 <code>git status</code> 命令查看本地倉儲狀態，看是否有未提交的更改或者未跟蹤的文件。</li>
</ul>
</li>
<li>
<p><strong>查看遠端倉儲情況</strong>：</p>
<ul>
<li>使用 GitHub 等代碼托管平台查看組員的遠端倉儲，確認組員是否已經推送了最新的更改。</li>
</ul>
</li>
<li>
<p><strong>檢查 .gitignore 文件</strong>：</p>
<ul>
<li>如果組員的文件被 .gitignore 排除了，可能導致不同步。查看 .gitignore 文件是否排除了組員的文件。</li>
</ul>
</li>
<li>
<p><strong>嘗試重新克隆</strong>：</p>
<ul>
<li>如果以上方法都無法解決問題，可以嘗試刪除本地的子目錄，然後重新克隆組員的遠端倉儲：</li>
</ul>
</li>
</ol>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">cd .. 
rm -rf 組員A目錄 # 刪除子目錄（請謹慎操作） 
git clone remote_repository_url 組員A目錄 # 重新克隆組員的遠端倉儲
</pre>
<h2>Problem discussion2</h2>
<p><span style="background-color: #ffff00;">同問:</span><span>如果不想手動處理</span></p>
<p></p>
<p><span style="background-color: #ff0000;">chatgpt答:</span></p>
<p>使用 Git Hooks：</p>
<p>Git Hooks 可以讓您在特定的 Git 事件觸發時自動執行腳本或命令。您可以使用 <code>post-merge</code> 或 <code>post-checkout</code> Hook 來在拉取或切換分支後自動同步子目錄內容。</p>
<ol>
<li>
<p><strong>post-merge Hook</strong>：</p>
<ul>
<li>當您從遠端倉儲拉取最新更改並合併到本地分支時觸發。</li>
<li>在倉儲的 <code>.git/hooks</code> 目錄下可以創建一個名為 <code>post-merge</code> 的檔案（無檔名擴展名），並為其添加執行權限。</li>
<li>編輯 <code>post-merge</code> 檔案，加入以下內容：</li>
</ul>
</li>
</ol>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#!/bin/sh
cd path/to/member_A  # 進入組員 A 的子目錄
git pull origin main  # 從組員 A 的主分支拉取最新更改
</pre>
<p><span>確保 </span><code>post-merge</code><span> 檔案有執行權限：</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">chmod +x .git/hooks/post-merge
</pre>
<p>post-checkout Hook：</p>
<ul>
<li>當您從不同分支切換到其他分支時觸發。</li>
<li>同樣，在倉儲的 <code>.git/hooks</code> 目錄下可以創建一個名為 <code>post-checkout</code> 的檔案（無檔名擴展名），並為其添加執行權限。</li>
<li>編輯 <code>post-checkout</code> 檔案，加入以下內容：</li>
</ul>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#!/bin/sh
cd path/to/member_A  # 進入組員 A 的子目錄
git pull origin main  # 從組員 A 的主分支拉取最新更改
</pre>
<p><span>確保 </span><code>post-checkout</code><span> 檔案有執行權限：</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">chmod +x .git/hooks/post-checkout
</pre>
<ol>
<li>
<p><strong>注意事項</strong>：</p>
<ul>
<li>將 <code>path/to/member_A</code> 替換為組員 A 的子目錄路徑。</li>
<li>您可以為每個組員的子目錄創建相應的 <code>post-merge</code> 或 <code>post-checkout</code> Hook。</li>
</ul>
</li>
</ol>
<p>這樣設置後，每次從遠端倉儲拉取最新更改或者切換分支時，Git 會自動執行對應的 Hook 腳本，自動進行子目錄內容的同步。這樣您就不需要手動處理了。</p>
<p>使用此方法<span>設置 Hook 時要小心，以免誤操作導致意外的結果.</span></p>
<h2>Problem discussion3</h2>
<p><span style="background-color: #ffff00;">問:</span><strong>說明如何在 </strong><strong><a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 環境中, 利用 IPv6 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">ZeroMQ Remote API</a> Python 進行兩個自由度的鋼球平衡檯自動控制系統模擬?</strong></p>
<p><span style="background-color: #ff0000;">chat gpt答:</span></p>
<ol>
<li>
<p><strong>安装ZeroMQ库和Python API：</strong> 确保你的Python环境中已经安装了ZeroMQ库，并且下载了CoppeliaSim的Python API。</p>
</li>
<li>
<p><strong>创建仿真场景：</strong> 在CoppeliaSim中创建一个仿真场景，包括一个具有两个自由度的钢球平衡台，并设置好仿真参数。</p>
</li>
<li>
<p><strong>启用远程API：</strong> 在CoppeliaSim的设置中启用远程API，并确保选择了IPv6 ZeroMQ作为通信协议。</p>
</li>
<li>
<p><strong>编写Python脚本：</strong> 编写Python脚本以连接到CoppeliaSim的远程API，并实现控制算法。这个脚本将使用ZeroMQ库来与CoppeliaSim通信。以下是一个简单的示例：</p>
</li>
</ol>
<div class="dark bg-gray-950 rounded-md">
<div class="flex items-center relative text-token-text-secondary bg-token-main-surface-secondary px-4 py-2 text-xs font-sans justify-between rounded-t-md">
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">import zmq
import time

# 连接到CoppeliaSim的ZeroMQ远程API
context = zmq.Context()
socket = context.socket(zmq.REQ)
socket.connect("tcp://[::1]:5555")  # 这里使用IPv6地址，根据你的设置修改

# 控制算法
def control_algorithm():
    # 在这里编写你的控制算法，根据当前状态计算控制命令
    # 这里只是一个示例，可能需要根据你的具体场景进行修改
    command = [0.1, 0.2]  # 假设控制命令为两个自由度的力或位移
    return command

# 主循环
while True:
    # 获取当前状态
    socket.send_string("get_state")
    state = socket.recv_json()

    # 计算控制命令
    command = control_algorithm()

    # 发送控制命令
    socket.send_json({"command": command})
    socket.recv_string()  # 等待确认

    time.sleep(0.1)  # 可根据需要调整控制频率
</pre>
<p>请注意，以上示例是一个简单的框架，实际控制算法需要根据你的具体模型和需求进行编写。同时，确保你的控制算法适用于你的平衡台模型，并且实现了适当的反馈控制。</p>
<ol start="5">
<li><strong>运行仿真：</strong> 在CoppeliaSim中启动仿真，并运行你的Python脚本。你应该能够看到钢球平衡台根据你的控制算法进行运动。</li>
</ol>
<h2>Problem discussion4</h2>
<p><span style="background-color: #ff0000;">問:</span>分組倉儲其中一組員內容無法同步，案例如下html。</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git pull origin main #分組倉儲資料夾中進入41023211子模組塊，執行遠端抓取最新資料。
From https://github.com/Wmrtbij49h/cd2024 #下面開始為出現的問題內容。
 * branch            main       -&gt; FETCH_HEAD
error: Your local changes to the following files would be overwritten by merge:
        markdown/20240218.md
Please commit your changes or stash them before you merge.
Aborting
Updating 403c103..f446e6c</pre>
<p><span style="background-color: #ffff00;">test:</span>我想刪除組員子目錄，並重新抓取。</p>
<p>我先將資料夾中關於41023211這個組員的相關資料刪除，後重新又抓取，但可能是我沒刪除乾淨，cmd對我說<span>Git 認為 '41023211' 已經存在於索引中，這通常意味著 '41023211' 已經被 Git 記錄為一個子模塊。子模塊是 Git 子項目的一部分，我放棄對41023211這位組員子目錄刪除，採用同名稱直接覆蓋的方法，程式碼如下面html檔。</span></p>
<p><span style="background-color: #ffff00;">chatgpt答:</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git submodule add --force https://github.com/Wmrtbij49h/cd2024.git 41023211
</pre>
<p><span>如果你確定這個本地的 '41023211' 子模塊目錄是正確的且包含了你想要的內容，你可以放心地使用 </span><code>--force</code><span> 選項。</span></p>
<p>請注意，如果你不確定如何處理這個情況，或者你希望使用不同的名稱來避免覆蓋現有的目錄，你可以使用 --name 選項來指定一個新的子模塊名稱。</p>
<h1>Github</h1>
<p>在git pull遇到下列問題</p>
<p><span style="background-color: #ffff00;">問題:</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">git pull origin main
From https://github.com/mdecd2024/2a-midag8
* branch main -&gt; FETCH_HEAD
Updating c96ebf6..916a3c7
error: Your local changes to the following files would be overwritten by merge:
blog/archives.html
blog/author/kmol.html
blog/authors.html
blog/categories.html
blog/category/w1.html
blog/feeds/all.atom.xml
blog/feeds/w1.atom.xml
blog/index.html
blog/pages/about/index.html
blog/search.html
blog/sitemap.xml
blog/tag/wang-zhi-bian-xie.html
blog/tags.html
markdown/20240218.md
Please commit your changes or stash them before you merge.</pre>
<p><span style="background-color: #ffff00;">詢問chatgpt後解決的方式:</span></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1.git checkout -- &lt;file&gt;  #此程式碼為放棄本地修改， 如果確定不需要這些本地修改，可以使用此命令放棄這些修改
2.git stash #此程式碼為儲藏本地修改，如果暫時不想提交這些修改但又不想喪失它們，可以使用此命令將修改儲藏起來，然後再執行 git pull origin main。
3.出現了git stash
Saved working directory and index state WIP on main: c96ebf6 up這段文字內容。
4.最後在git pull origin main抓取最新資料。


</pre>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">1.git stash pop  #此程式碼為完成拉取後，可以使用將儲藏的修改應用回來。</pre>
<br/> <br/><br/>
<h1>w12 task1</h1>
<p>因為一開始沒理解完全老師任務所要求的方式倒置整個零組件要重新繪製，我共分成了全手動繪製、<span>python繪製感覺其實差不多只是有多做一個錄製的動作。下面細分兩種畫法</span></p>
<p><span>使用手動繪製platform這個零件檔案如下:</span></p>
<p><a href="/downloads/零件2.zip">platform零件檔 (手動</a></p>
<p><span style="color: #000000; background-color: #ffcc00;">影片:</span></p>
<p><span style="color: #000000; background-color: #ffcc00;"></span> <iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/ice-YsYdZNY?si=K_pJMsA6ODVgcdBk" title="YouTube video player" width="560"></iframe></p>
<p><span><a href="/downloads/零件.zip"></a></span>使用python繪製platform這個零件檔案如下:</p>
<p><a href="/downloads/零件.zip">platform零件檔 (python</a></p>
<p><span style="background-color: #ffcc00;">影片:</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/zWLjwmxH2tk?si=ZzPeheqqOcp_gfp9" title="YouTube video player" width="560"></iframe></p><h1>cmsimde</h1>
<p><span style="background-color: #ccffcc;">SMap</span> - SiteMap - 依照階次列出網站的所有頁面.</p>
<p><span style="background-color: #ccffcc;">EditA</span> - Edit All page - 將所有頁面放入編輯模式中, 主要用來處理頁面搬遷, 刪除或決定衝突頁面內容版本.</p>
<p><span style="background-color: #ccffcc;">Edit</span> - Edit page - 先選擇要編輯的單一頁面後, 再點選 Edit, 即可進入單一頁面的編輯模式.</p>
<p><span style="background-color: #ccffcc;">Config</span> - Configure Site - 編輯頁面標題與管理者密碼.</p>
<p><span style="background-color: #ccffcc;">Search</span> - 動態頁面內容的關鍵字搜尋.</p>
<p><span style="background-color: #ccffcc;">IUpload</span> - Image file Upload - 圖檔的上傳功能, 可以上傳 jpg, png 與 gif 檔案, 其中若在手機上傳圖檔, 系統會自動將圖片檔案縮小為 800x800 大小.</p>
<p><span style="background-color: #ccffcc;">IList</span> - Image file List - 列出可以直接在頁面編輯模式中引用的圖片檔案.</p>
<p><span style="background-color: #ccffcc;">FUpload</span> - File Upload - 一般檔案的上傳功能, 目前可以上傳的檔案副檔名包括 'jpg', 'png', 'gif', '7z', 'pdf', 'zip', 'ttt', 'stl', 'txt', 'html', 'mp4' 等, 使用者可以自行修改.</p>
<p><span style="background-color: #ccffcc;">FList</span> - File List - 列出可以直接在頁面編輯模式中引用的上傳檔案.</p>
<p><span style="background-color: #ccffcc;">Logout</span> - 登出頁面編輯模式.</p>
<p><span style="background-color: #ccffcc;">Convert</span> - 將動態網站中位於 config/content.htm 檔案, 透過分頁設定轉為 content 目錄中的靜態網頁.</p>
<p><span style="background-color: #ccffcc;">acp</span> - git add, git commit 與 git push, 通常只有在 localhost 或自架主機上利用網頁表單協助將倉儲改版內容推向 Github 倉儲.</p>
<p><span style="background-color: #ccffcc;">SStatic</span> - Start Static Site - 利用 Python 啟動網站伺服功能, 可以讓使用者檢查轉檔後的靜態網站內容.</p>
<p><span style="background-color: #ccffcc;">RStatic</span> - Replit Static Site URL - 僅用於 Replit 模式, 當使用者按下 SStatic 後, 可以按下 RStatic 進入當下尚未推向 Github Pages 的靜態網站.</p>
<p><span style="background-color: #ccffcc;">80</span> - 由 init.py 中 static_port 所決定的連結字串, 一般不使用 80, 只有在 Replit 中為了與動態網站共用 port, 才特別設為 80.</p>
<p></p>
<h1>Replit</h1>
<p><a href="https://replit.com">https://replit.com</a></p>
<p>利用 init_replit 指令安裝所需 Python 模組<br/><br/>chmod u+x init_replit<br/><br/>./init_replit</p>
<p dir="auto">On Replit:</p>
<p dir="auto">.replit: python3 main.py</p>
<p dir="auto">chmod u+x cms init_replit</p>
<p dir="auto">./init_replit</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde_site (not needed): git submodule update --init --recursive</p>
<p dir="auto" style="padding-left: 30px;">for cmsimde: pip install flask flask_cors bs4 lxml pelican markdown gevent</p>
<p dir="auto">password generator: <a href="https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py">https://mde.tw/cmsite/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/b92b16621dd0246c352cf13d6463b333/raw/0bfa669750aba3abe48554509bbd43d65b6e5c82/hashlib_password_generator.py</a> </p>
<p dir="auto"></p>
<p dir="auto">for IPv6 only Ubuntu:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.com<br/>ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p<br/><br/>for Replit:<br/><br/>.ssh 目錄中的 config, 將 SSH session 名稱設為 github.com:<br/><br/>Host github.com<br/>User git<br/>Hostname github.co<br/>#since Replit works for IPv4, therefore no ProxyCommand setting needed<br/>#ProxyCommand /usr/bin/ncat --proxy p4.cycu.org:3128 --proxy-type http %h %p</p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>
</div>
</div>